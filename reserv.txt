import telebot
import random
import string

bot = telebot.TeleBot('6227538798:AAFfukZtOuhEP9LeRp5qmR3LUXSsiJjKznc')

# Variable to store the current stage of password generation
stage = 0
foundation1 = ""

# Command /start
@bot.message_handler(commands=['start'])
def send_welcome(message):
    bot.reply_to(message, "–ü—Ä–∏–≤—ñ—Ç –ó–∞–±—É–≤–∞–∫–∞ )) –Ø –∑–≥–µ–Ω–µ—Ä—É—é –ø–∞—Ä–æ–ª—å —è–∫–∏–π —Ç–∏ '–Ω–∞–ø–µ–≤–Ω–æ' –Ω–µ –∑–∞–±—É–¥–µ—à, –≤–≤–µ–¥–∏ –ø–µ—Ä—à–∏–π –Ω–∞–±—ñ—Ä —Å–∏–º–≤–æ–ª—ñ–≤(—Ü–µ –º–æ–∂–µ –±—É—Ç–∏ –∞–¥—Ä–µ—Å–∞ —Å–∞–π—Ç—É,–∞–ª–µ –±–µ–∑ –∑–Ω–∞–∫—ñ–≤ ( , / . = ) –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: wwwgooglecom ")

# Message handler
@bot.message_handler(func=lambda message: True)
def generate_password(message):
    global stage, foundation1, foundation2
    if stage == 0:
        # Get the first set of characters
        foundation1 = message.text
        # Move to the next stage of password generation
        stage += 1
        # Wait for the second set of characters
        bot.reply_to(message, "–í–≤–µ–¥—ñ—Ç—å –¥—Ä—É–≥–∏–π –Ω–∞–±—ñ—Ä —Å–∏–º–≤–æ–ª—ñ–≤(–∫—Ä–∞—â–µ –∫–æ–ª–∏ —Ü–µ –±—É–¥–µ —Å–ª–æ–≤–æ –ø–∞—Ä–æ–ª—å —è–∫–µ –≤–∏ –Ω–µ –∑–∞–±—É–¥–µ—Ç–µ —Ç–∞ –º–∞—Ç–∏–º–µ –≤–µ–ª–∏–∫—ñ –ª—ñ—Ç–µ—Ä–∏,–º–∞–ª—ñ,—Ü–∏—Ñ—Ä–∏ —Ç–∞ —Å–∏–º–≤–æ–ª) : ")
    elif stage == 1:
        # Get the second set of characters
        foundation2 = message.text
        # Move to the next stage of password generation
        stage += 1
        # Wait for the length of the password
        bot.reply_to(message, "–í–≤–µ–¥—ñ—Ç—å –¥–æ–≤–∂–∏–Ω—É –ø–∞—Ä–æ–ª—é —è–∫—É –± –≤–∏ —Ö–æ—Ç—ñ–ª–∏ –æ—Ç—Ä–∏–º–∞—Ç–∏ :")
    elif stage == 2:
        # Get the length of the password
        try:
            pass_len = int(message.text)
        except ValueError:
            bot.reply_to(message, "–¶–µ –º–∞—î –±—É—Ç–∏ —Ü—ñ–ª–µ —á–∏—Å–ª–æ. –ü–æ–≤—Ç–æ—Ä—ñ—Ç—å —Å–ø—Ä–æ–±—É")
            return
        # Generate the password
        random.seed(0)
        password_list = []
        for i in range(pass_len):
            if i == 0:  # first character - uppercase letter
                password_list.append(random.choice(foundation1).upper())
            elif i == pass_len - 2:  # second to last character - number
                password_list.append(random.choice(string.digits))
            elif i == pass_len - 1:  # last character - symbol
                password_list.append(random.choice(string.punctuation))
            elif i % 2 == 0:
                password_list.append(random.choice(foundation1))
            else:
                password_list.append(random.choice(foundation2))
        password = ''.join(password_list)
        bot.reply_to(message, "–ó–∞–¥–ª—è –±–µ–∑–ø–µ–∫–∏ –≤–∏–¥–∞–ª—ñ—Ç—å —ñ—Å—Ç–æ—Ä—ñ—é —á–∞—Ç—É.–í–∏ –∑–∞–≤–∂–¥–∏ –∑–º–æ–∂–µ—Ç–µ –∑–Ω–∞–π—Ç–∏ —Å–≤—ñ–π –ø–∞—Ä–æ–ª—å, –ø–æ–≤—Ç–æ—Ä–Ω–æ –≤–≤—ñ–≤—à–∏ –í–∞—à—ñ –Ω–∞–±–æ—Ä–∏ —Å–∏–º–≤–æ–ª—ñ–≤. –í–∞—à –ø–∞—Ä–æ–ª—å: ")
        bot.reply_to(message, "{}".format(password))
        # –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –ø–æ—á–∞—Ç–∫–æ–≤–æ–≥–æ –µ—Ç–∞–ø—É –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –ø–∞—Ä–æ–ª—é
        stage = 0
        foundation1 = ""
        foundation2 = ""
        bot.reply_to(message, "–ú–æ–∂–µ–º–æ –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –Ω–∞—Å—Ç—É–ø–Ω–∏–π –ø–∞—Ä–æ–ª—å –∑–∞ –ø–æ—Ç—Ä–µ–±–∏ —á–∏ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏ –≤–∂–µ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–∏–π. –í–∏ –∑–Ω–∞—î—Ç–µ —â–æ —Ä–æ–±–∏—Ç–∏ üòâ ")

bot.polling()

# –≤–µ—Ä—Å—ñ—è 2.0

import telebot
import random
import string

bot = telebot.TeleBot('6227538798:AAFfukZtOuhEP9LeRp5qmR3LUXSsiJjKznc')

# Variable to store the current stage of password generation
stage = 0
foundation1 = ""

# Command /start
@bot.message_handler(commands=['start'])
def send_welcome(message):
    bot.reply_to(message, "–ü—Ä–∏–≤—ñ—Ç –ó–∞–±—É–≤–∞–∫–∞ )) –Ø –∑–≥–µ–Ω–µ—Ä—É—é –ø–∞—Ä–æ–ª—å —è–∫–∏–π —Ç–∏ '–Ω–∞–ø–µ–≤–Ω–æ' –Ω–µ –∑–∞–±—É–¥–µ—à, –≤–≤–µ–¥–∏ –ø–µ—Ä—à–∏–π –Ω–∞–±—ñ—Ä —Å–∏–º–≤–æ–ª—ñ–≤(—Ü–µ –º–æ–∂–µ –±—É—Ç–∏ –∞–¥—Ä–µ—Å–∞ —Å–∞–π—Ç—É,–∞–ª–µ –±–µ–∑ –∑–Ω–∞–∫—ñ–≤ ( , / . = ) –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: wwwgooglecom ")

# Message handler
@bot.message_handler(func=lambda message: True)
def generate_password(message):
    global stage, foundation1, foundation2
    if stage == 0:
        # Get the first set of characters
        if len(message.text) > 100:
            bot.reply_to(message, "–ù–∞–±—ñ—Ä —Å–∏–º–≤–æ–ª—ñ–≤ –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –¥–æ–≤—à–∏–º –∑–∞ 100 —Å–∏–º–≤–æ–ª—ñ–≤. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
            return
        foundation1 = message.text
        # Move to the next stage of password generation
        stage += 1
        # Wait for the second set of characters
        bot.reply_to(message, "–í–≤–µ–¥—ñ—Ç—å –¥—Ä—É–≥–∏–π –Ω–∞–±—ñ—Ä —Å–∏–º–≤–æ–ª—ñ–≤(–∫—Ä–∞—â–µ –∫–æ–ª–∏ —Ü–µ –±—É–¥–µ —Å–ª–æ–≤–æ –ø–∞—Ä–æ–ª—å —è–∫–µ –≤–∏ –Ω–µ –∑–∞–±—É–¥–µ—Ç–µ —Ç–∞ –º–∞—Ç–∏–º–µ –≤–µ–ª–∏–∫—ñ –ª—ñ—Ç–µ—Ä–∏,–º–∞–ª—ñ,—Ü–∏—Ñ—Ä–∏ —Ç–∞ —Å–∏–º–≤–æ–ª) : ")
    elif stage == 1:
        # Get the second set of characters
        if len(message.text) > 100:
            bot.reply_to(message, "–ù–∞–±—ñ—Ä —Å–∏–º–≤–æ–ª—ñ–≤ –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –¥–æ–≤—à–∏–º –∑–∞ 100 —Å–∏–º–≤–æ–ª—ñ–≤. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
            return
        foundation2 = message.text
        # Move to the next stage of password generation
        stage += 1
        # Wait for the length of the password
        bot.reply_to(message, "–í–≤–µ–¥—ñ—Ç—å –¥–æ–≤–∂–∏–Ω—É –ø–∞—Ä–æ–ª—é —è–∫—É –± –≤–∏ —Ö–æ—Ç—ñ–ª–∏ –æ—Ç—Ä–∏–º–∞—Ç–∏ :")
    elif stage == 2:
        # Get the length of the password
        try:
            pass_len = int(message.text) 
        except ValueError:
            bot.reply_to(message, "–¶–µ –º–∞—î –±—É—Ç–∏ —Ü—ñ–ª–µ —á–∏—Å–ª–æ. –ü–æ–≤—Ç–æ—Ä—ñ—Ç—å —Å–ø—Ä–æ–±—É")
            return
        if pass_len > 100:
            bot.reply_to(message, "–î–æ–≤–∂–∏–Ω–∞ –ø–∞—Ä–æ–ª—é –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –±—ñ–ª—å—à–µ 100 —Å–∏–º–≤–æ–ª—ñ–≤. –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
            return
        # Generate the password
        random.seed(0)
        password_list = []
        for i in range(pass_len):
            if i == 0:  # first character - uppercase letter
                password_list.append(random.choice(foundation1).upper())
            elif i == pass_len - 2:  # second to last character - number
                password_list.append(random.choice(string.digits))
            elif i == pass_len - 1:  # last character - symbol
                password_list.append(random.choice(string.punctuation))
            elif i % 2 == 0:
                password_list.append(random.choice(foundation1))
            else:
                password_list.append(random.choice(foundation2))
        password = ''.join(password_list)
        bot.reply_to(message, "–ó–∞–¥–ª—è –±–µ–∑–ø–µ–∫–∏ –≤–∏–¥–∞–ª—ñ—Ç—å —ñ—Å—Ç–æ—Ä—ñ—é —á–∞—Ç—É.–í–∏ –∑–∞–≤–∂–¥–∏ –∑–º–æ–∂–µ—Ç–µ –∑–Ω–∞–π—Ç–∏ —Å–≤—ñ–π –ø–∞—Ä–æ–ª—å, –ø–æ–≤—Ç–æ—Ä–Ω–æ –≤–≤—ñ–≤—à–∏ –í–∞—à—ñ –Ω–∞–±–æ—Ä–∏ —Å–∏–º–≤–æ–ª—ñ–≤. –í–∞—à –ø–∞—Ä–æ–ª—å: ")
        bot.reply_to(message, "{}".format(password))
        # –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –ø–æ—á–∞—Ç–∫–æ–≤–æ–≥–æ –µ—Ç–∞–ø—É –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –ø–∞—Ä–æ–ª—é
        stage = 0
        foundation1 = ""
        foundation2 = ""
        bot.reply_to(message, "–ú–æ–∂–µ–º–æ –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –Ω–∞—Å—Ç—É–ø–Ω–∏–π –ø–∞—Ä–æ–ª—å –∑–∞ –ø–æ—Ç—Ä–µ–±–∏ —á–∏ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏ –≤–∂–µ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–∏–π. –í–∏ –∑–Ω–∞—î—Ç–µ —â–æ —Ä–æ–±–∏—Ç–∏ üòâ ")

bot.polling()